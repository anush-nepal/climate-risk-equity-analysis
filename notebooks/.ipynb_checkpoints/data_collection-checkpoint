{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "be98651b-1882-4d94-981a-062e5bcdd92a",
   "metadata": {},
   "source": [
    "# Climate Risk Premium Analysis: Data Collection\n",
    "\n",
    "**Project**: Analyzing Climate Risk Premiums in US Equity Markets  \n",
    "**Notebook**: 1. Data Collection  \n",
    "**Author**: Anush Nepal  \n",
    "\n",
    "## Objective\n",
    "This notebook collects stock price data for companies in three climate-sensitive sectors:\n",
    "- **Energy**: Direct exposure to transition risks and carbon regulations\n",
    "- **Insurance**: Companies that price climate risks into their business models\n",
    "- **Real Estate**: Physical assets exposed to climate events\n",
    "\n",
    "Gathering 7 years of data (2017-2024) to analyze how climate events impact stock prices and whether investors price climate risk into valuations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a817a6c-ae3f-4187-877e-8e0ce5ce413f",
   "metadata": {},
   "source": [
    "## 1. Importing Required Libraries\n",
    "Following are the Python libraries we'll use for data collection and analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aaeb9afb-d746-4689-8078-12ebf9f2e36e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Libraries imported successfully.\n",
      "Pandas version: 2.2.3\n",
      "Current date: 2025-08-11\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import yfinance as yf # For stock data collection\n",
    "\n",
    "from datetime import datetime, timedelta\n",
    "import time\n",
    "import os \n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', None)\n",
    "\n",
    "print(\"Libraries imported successfully.\")\n",
    "print(f\"Pandas version: {pd.__version__}\")\n",
    "print(f\"Current date: {datetime.now().strftime('%Y-%m-%d')}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d20cf3e-a491-4588-89e3-d4d089f3293d",
   "metadata": {},
   "source": [
    "## 2. Defining Company Lists by Sector\n",
    "We'll focus on large-cap companies in each sector to ensure data quality and liquidity. These firms represent the major players that institutional investors would focus on. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e2c51227-94d5-4756-b0a5-58fb3199493f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total companies selected: 45\n",
      "Energy: 15 companies\n",
      "- Sample tickers: XOM, CVX, COP, EOG, SLB...\n",
      "Insurance: 15 companies\n",
      "- Sample tickers: BRK-B, PGR, TRV, ALL, CB...\n",
      "Real Estate: 15 companies\n",
      "- Sample tickers: PLD, AMT, CCI, EQIX, WELL...\n"
     ]
    }
   ],
   "source": [
    "# Energy Sector (major oil, gas, and renewable energy companies)\n",
    "energy_tickers = [\n",
    "    'XOM', # Exxon Mobil\n",
    "    'CVX', # Chevron\n",
    "    'COP', # ConocoPhillips\n",
    "    'EOG', #EOG Resources\n",
    "    'SLB', # Schlumberger\n",
    "    'PXD', # Pioneer Natural Resources\n",
    "    'KMI', # Kinder Morgan\n",
    "    'OXY', # Occidental Petroleum\n",
    "    'VLO', # Valero Energy\n",
    "    'PSX', # Phillips 66\n",
    "    'MPC', # Marathon Petroleum\n",
    "    'HAL', # Halliburton\n",
    "    'BKR', # Baker Hughes\n",
    "    'DVN', # Devon Energy\n",
    "    'FANG' # Diamondback Energy\n",
    "]\n",
    "\n",
    "# Insurance Sector (property & casualty insurers most exposed to climate risk)\n",
    "insurance_tickers = [\n",
    "    'BRK-B', # Berkshire Hathaway\n",
    "    'PGR',   # Progressive\n",
    "    'TRV',   # Travelers\n",
    "    'ALL',   # Allstate\n",
    "    'CB',    # Chubb\n",
    "    'AIG',   # American International Group\n",
    "    'HIG',   # Hartford Financial\n",
    "    'CNA',   # CNA Financial\n",
    "    'RLI',   # RLI Corp\n",
    "    'AFG',   # American Financial Group\n",
    "    'CINF',  # Cincinnati Financial\n",
    "    'WRB',   # W.R. Berkley\n",
    "    'Y',     # Alleghany\n",
    "    'EG',    # Everest Group\n",
    "    'KMPR'   # Kemper\n",
    "]\n",
    "\n",
    "# Real Estate Sector (REITs and real estate companies)\n",
    "real_estate_tickers = [\n",
    "    'PLD',   # Prologis (logistics real estate)\n",
    "    'AMT',   # American Tower (cell towers)\n",
    "    'CCI',   # Crown Castle (cell towers)\n",
    "    'EQIX',  # Equinix (data centers)\n",
    "    'WELL',  # Welltower (healthcare real estate)\n",
    "    'DLR',   # Digital Realty Trust\n",
    "    'SPG',   # Simon Property Group (malls)\n",
    "    'O',     # Realty Income\n",
    "    'AVTR',  # Avantax (residential)\n",
    "    'EXR',   # Extended Stay America\n",
    "    'AVB',   # AvalonBay Communities\n",
    "    'EQR',   # Equity Residential\n",
    "    'MAA',   # Mid-America Apartment Communities\n",
    "    'ESS',   # Essex Property Trust\n",
    "    'UDR'    # UDR Inc\n",
    "]\n",
    "\n",
    "# Combining all sectors into a master dictionary\n",
    "sector_tickers = {\n",
    "    'Energy': energy_tickers,\n",
    "    'Insurance': insurance_tickers,\n",
    "    'Real Estate': real_estate_tickers\n",
    "}\n",
    "\n",
    "# Summary\n",
    "total_companies = sum(len(tickers) for tickers in sector_tickers.values())\n",
    "print(f\"Total companies selected: {total_companies}\")\n",
    "for sector, tickers in sector_tickers.items():\n",
    "    print(f\"{sector}: {len(tickers)} companies\")\n",
    "    print(f\"- Sample tickers: {', '.join(tickers[:5])}...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4f95482-06c7-4ceb-a1b6-85bb6019168b",
   "metadata": {},
   "source": [
    "## 3. Defining Climate Events for Analysis\n",
    "We'll focus on major climate events from 2017-2024 that had significant economic impact and media coverage. These events provide natural experiments to study market reactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a5c618cb-1d0f-408b-9b47-341555a3bd75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Climate Events for Analysis:\n",
      "\n",
      "2017-08-25: Hurricane Harvey (Hurricane)\n",
      " Category 4 hurricane, $125B+ damages, major oil refinery impacts\n",
      "\n",
      "2017-09-10: Hurricane Irma (Hurricane)\n",
      " Category 4 hurricane, Florida impact, insurance claims spike\n",
      "\n",
      "2018-11-08: Camp Fire (Wildfire)\n",
      " Deadliest CA wildfire, PG&E bankruptcy, massive insurance losses\n",
      "\n",
      "2020-01-03: Australia Bushfires (Wildfire)\n",
      " Record-breaking bushfires, global climate concerns\n",
      "\n",
      "2021-02-15: Texas Winter Storm (Extreme Cold)\n",
      " Power grid failure, energy infrastructure collapse\n",
      "\n",
      "2022-09-28: Hurricane Ian (Hurricane)\n",
      " Category 4, $112B+ damages, major insurance event\n",
      "\n",
      "2023-07-18: European Heat Wave (Heat Wave)\n",
      " Record temperatures, infrastructure stress, energy demand\n",
      "\n",
      "\n",
      "Total events: 7\n",
      "Date range: 2017-08-25 to 2023-07-18\n"
     ]
    }
   ],
   "source": [
    "# Major climate events\n",
    "climate_events = {\n",
    "    'Hurricane Harvey': {\n",
    "        'date': '2017-08-25',\n",
    "        'type': 'Hurricane',\n",
    "        'description': 'Category 4 hurricane, $125B+ damages, major oil refinery impacts'},\n",
    "    'Hurricane Irma': {\n",
    "        'date': '2017-09-10', \n",
    "        'type': 'Hurricane',\n",
    "        'description': 'Category 4 hurricane, Florida impact, insurance claims spike'},\n",
    "    'Camp Fire': {\n",
    "        'date': '2018-11-08',\n",
    "        'type': 'Wildfire', \n",
    "        'description': 'Deadliest CA wildfire, PG&E bankruptcy, massive insurance losses'},\n",
    "    'Australia Bushfires': {\n",
    "        'date': '2020-01-03',\n",
    "        'type': 'Wildfire',\n",
    "        'description': 'Record-breaking bushfires, global climate concerns'},\n",
    "    'Texas Winter Storm': {\n",
    "        'date': '2021-02-15',\n",
    "        'type': 'Extreme Cold',\n",
    "        'description': 'Power grid failure, energy infrastructure collapse'},\n",
    "    'Hurricane Ian': {\n",
    "        'date': '2022-09-28',\n",
    "        'type': 'Hurricane', \n",
    "        'description': 'Category 4, $112B+ damages, major insurance event'},\n",
    "    'European Heat Wave': {\n",
    "        'date': '2023-07-18',\n",
    "        'type': 'Heat Wave',\n",
    "        'description': 'Record temperatures, infrastructure stress, energy demand'}\n",
    "}\n",
    "\n",
    "#Converting to DataFrame\n",
    "events_df = pd.DataFrame.from_dict(climate_events, orient='index').reset_index()\n",
    "events_df.columns = ['Event_Name', 'Date', 'Type', 'Description']\n",
    "events_df['Date'] = pd.to_datetime(events_df['Date'])\n",
    "events_df = events_df.sort_values('Date')\n",
    "\n",
    "print(\"Climate Events for Analysis:\")\n",
    "print()\n",
    "for _, event in events_df.iterrows():\n",
    "    print(f\"{event['Date'].strftime('%Y-%m-%d')}: {event['Event_Name']} ({event['Type']})\")\n",
    "    print(f\" {event['Description']}\")\n",
    "    print()\n",
    "print(f\"\\nTotal events: {len(events_df)}\")\n",
    "print(f\"Date range: {events_df['Date'].min().strftime('%Y-%m-%d')} to {events_df['Date'].max().strftime('%Y-%m-%d')}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
